/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package data.input;
import java.io.File;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Scanner;
import javax.swing.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Collection;
import java.util.stream.Collectors;
        
/**
 *
 * @author Admin

*/
public class MenuUploadFile extends javax.swing.JFrame {
    Database dbsetting;
    String driver, database,user, pass;

    /**
     * Creates new form MenuUploadFile
     */
    JFrame frame = new JFrame();
    public MenuUploadFile() {
        initComponents();
        // this.setSize(600,400);
        this.setSize(1200,1000);
        this.show();
        this.setVisible(true);
        
        dbsetting = new Database();
        driver = dbsetting.SettingPanel("DBDriver");
        database = dbsetting.SettingPanel("DBDatabase");
        user = dbsetting.SettingPanel("DBUsername");
        pass = dbsetting.SettingPanel("DBPassword");
        System.out.println("driver: "+driver+"user: "+user);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        cmdbrowse = new javax.swing.JButton();
        cmdsimpan = new javax.swing.JButton();
        txtpath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txttampilkalimat = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        cmdbrowse.setText("Browse");
        cmdbrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdbrowseActionPerformed(evt);
            }
        });
        getContentPane().add(cmdbrowse);
        cmdbrowse.setBounds(430, 20, 100, 25);

        cmdsimpan.setText("Simpan");
        cmdsimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdsimpanActionPerformed(evt);
            }
        });
        getContentPane().add(cmdsimpan);
        cmdsimpan.setBounds(150, 60, 130, 30);
        getContentPane().add(txtpath);
        txtpath.setBounds(130, 20, 290, 30);

        jLabel1.setText("Upload File");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(40, 20, 80, 16);

        txttampilkalimat.setColumns(20);
        txttampilkalimat.setRows(5);
        txttampilkalimat.setBorder(javax.swing.BorderFactory.createTitledBorder("Tampil per Kalimat"));
        jScrollPane1.setViewportView(txttampilkalimat);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 110, 960, 650);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdbrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdbrowseActionPerformed
        // TODO add your handling code here:
        String filename=txtpath.getText();
        JFileChooser fc = new JFileChooser(new File(filename));
        //show open dialog
        fc.showOpenDialog(frame);
        File selectedFile = fc.getSelectedFile();
        //show save dialog
        int option = fc.showSaveDialog(frame);
            if(option == JFileChooser.APPROVE_OPTION){
               File file = fc.getSelectedFile();
               txtpath.setText("" + file.getPath());
            }else{
               txtpath.setText("Save command canceled");
            }   
    }//GEN-LAST:event_cmdbrowseActionPerformed

    int total_kata = 0;
    float min_threshold = 0.0f;
    
//    ArrayList<String> kumpulan_kalimat = new ArrayList<>();
//    List<String> kumpulan_kalimat = new List<>();
    List<String> kumpulan_kalimat = new ArrayList<>();
    
    private void cmdsimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdsimpanActionPerformed
//        ProsesBacaFile(txtpath.getText().toString());
        simpan_ke_database(txtpath.getText().toString());
        cetak_tfidf(txtpath.getText().toString());
    }//GEN-LAST:event_cmdsimpanActionPerformed
    
    public void simpan_ke_database(String filename){
        String data1perkata[] = new String[100];
        try{
            // baca kalimat
            
            String kalimat = "";
            String kalimat_per_baris = "";
            File myobj  = new File(filename);
            Scanner data = new Scanner(myobj);
            Class.forName(driver);
            Connection kon = DriverManager.getConnection(database,user,pass);
            Statement stt = kon.createStatement();
            while(data.hasNextLine()){
                // simpan kalimat
                
                kalimat_per_baris = data.nextLine();
                // String sql = "INSERT INTO daftar_kalimat (kalimat) VALUES ('" + kalimat_per_baris + "')";
                String sql = "INSERT INTO daftar_kalimat (kalimat) VALUES ('" + kalimat_per_baris + "')";
                stt.executeUpdate(sql);
            }
            
            stt.close();
            kon.close();
            
        }catch(Exception e){
            System.err.println(e.getMessage());
        }
    }
    
    public void cetak_tfidf(String filename){
        String kalimat_yang_akan_dicetak = "";
//        String kalimat = "";
        try{
            File myobj  = new File(filename);
            Scanner data = new Scanner(myobj);
            
            List<String> kumpulan_Kalimat = new ArrayList<>();
            while(data.hasNextLine()){
                kumpulan_Kalimat.add(data.nextLine());
            }
            
            int total_kalimat = kumpulan_Kalimat.size();
            int total_kata = kumpulan_Kalimat.stream().mapToInt(s -> s.split("\\s+").length).sum();
            double min_threshold = (double) total_kata/total_kalimat;
            
            System.out.println("Total Kata : " + total_kata);
            System.out.println("Nilai Min Threshold : " + min_threshold);
            
            // Tokenisasi
            List<List<String>> tokenisasi_kumpulan_kalimat = kumpulan_Kalimat.stream()
                    .map(kalimat -> Arrays.asList(kalimat.toLowerCase().split("\\s+")))
                    .collect(Collectors.toList());
            
            // frekuensi kata dalam setiap kalimat
            Map<String, Map<String, Integer>> frekuensi_kata = new HashMap<>();
            for (int i = 0; i < tokenisasi_kumpulan_kalimat.size(); i++) {
                Map<String, Integer> tfMap = new HashMap<>();
                for (String kata : tokenisasi_kumpulan_kalimat.get(i)) {
                    tfMap.put(kata, tfMap.getOrDefault(kata, 0) + 1);
                }
                frekuensi_kata.put("Kalimat ke-" + (i+1), tfMap);
            }
            
            // Cetak
            // frekuensi kata dalam setiap kalimat
            kalimat_yang_akan_dicetak+="\nFrekueni kata dalam setiap kalimat\n\n";
            System.out.println("\nFrekueni kata dalam setiap kalimat\n");
            for (Map.Entry<String, Map<String, Integer>> entry : frekuensi_kata.entrySet()) {
                String documentName = entry.getKey();
                Map<String, Integer> tfMap = entry.getValue();

                kalimat_yang_akan_dicetak+="\nKalimat: " + documentName + "\n";
                System.out.println("\nKalimat: " + documentName);
                for (Map.Entry<String, Integer> termEntry : tfMap.entrySet()) {
                    String kata = termEntry.getKey();
                    int frekuensi = termEntry.getValue();

                    kalimat_yang_akan_dicetak+="Kata: " + kata + ", Frekuensi: " + frekuensi + "\n";
                    System.out.println("Kata: " + kata + ", Frekuensi: " + frekuensi);
                }
                System.out.println();
            }
            
            // Banyaknya kata dalam seluruh kumpulan kalimat
            // df, document frekuensi
            Map<String, Integer> df = new HashMap<>();
            for (Map<String, Integer> tfMap : frekuensi_kata.values()) {
                for (String kata : tfMap.keySet()) {
                    df.put(kata, df.getOrDefault(kata, 0) + 1);
                }
            }
            
            // Cetak
            // Banyaknya kata untuk seluruh kumpulan kalimat
            // df, document frekuensi
            kalimat_yang_akan_dicetak+="\nFrekueni kata dalam seluruh kumpulan kalimat\n\n";
            System.out.println("\nFrekueni kata dalam seluruh kumpulan kalimat\n");
            for (Map.Entry<String, Integer> termEntry : df.entrySet()) {
                String kata = termEntry.getKey();
                int frekuensi = termEntry.getValue();

                kalimat_yang_akan_dicetak+="Kata: " + kata + ", Frekuensi: " + frekuensi + "\n";
                System.out.println("Kata: " + kata + ", Frekuensi: " + frekuensi);
            }
            
            // tfWi
            Map<String, Double> tf_wi = new HashMap<>();
            for (String kata : df.keySet()){
                tf_wi.put(kata, (double) df.get(kata) / total_kata);
            }
            
            // Cetak
            // tfWi
            kalimat_yang_akan_dicetak+="\nNilai TF(Wi) setiap kata\n\n";
            System.out.println("\nNilai TF(Wi) setiap kata\n");
            for (Map.Entry<String, Double> termEntry : tf_wi.entrySet()) {
                String kata = termEntry.getKey();
                Double nilai = termEntry.getValue();

                kalimat_yang_akan_dicetak+="Kata: " + kata + ", TF(Wi): " + nilai + "\n";
                System.out.println("Kata: " + kata + ", Nilai TF(Wi): " + nilai);
            }
            
            // idf_wi
            Map<String, Double> idf_wi = new HashMap<>();
            for (String kata : df.keySet()){
                idf_wi.put(kata, (double) total_kalimat/df.get(kata));
            }
            
            // Cetak
            // idf_wi
            kalimat_yang_akan_dicetak+="\nNilai IDF(Wi) setiap kata\n\n";
            System.out.println("\nNilai IDF(Wi) setiap kata\n");
            for (Map.Entry<String, Double> termEntry : idf_wi.entrySet()) {
                String kata = termEntry.getKey();
                Double nilai = termEntry.getValue();

                kalimat_yang_akan_dicetak+="Kata: " + kata + ", IDF(Wi): " + nilai + "\n";
                System.out.println("Kata: " + kata + ", Nilai IDF(Wi): " + nilai);
            }
            
            // w_wi
            Map<String, Double> w_wi = new HashMap<>();
            for (String kata : df.keySet()){
                w_wi.put(kata, tf_wi.get(kata)*Math.log(idf_wi.get(kata)) / Math.log(2));
            }
            
            // Cetak
            // w_wi
            kalimat_yang_akan_dicetak+="\nNilai W(Wi) setiap kata\n\n";
            System.out.println("\nNilai W(Wi) setiap kata\n");
            for (Map.Entry<String, Double> termEntry : w_wi.entrySet()) {
                String kata = termEntry.getKey();
                Double nilai = termEntry.getValue();

                kalimat_yang_akan_dicetak+="Kata: " + kata + ", Nilai W(Wi): " + nilai + "\n";
                System.out.println("Kata: " + kata + ", Nilai W(Wi): " + nilai);
            }
            
            // total w setiap kalimat
            Map<String, Double> total_w_setiap_kalimat = new HashMap<>();
            for (int i = 0; i < tokenisasi_kumpulan_kalimat.size(); i++){
                double total_w = 0;
                for (String kata : tokenisasi_kumpulan_kalimat.get(i)){
                    total_w += w_wi.getOrDefault(kata, 0.0);
                }
                total_w_setiap_kalimat.put("kalimat-" + (i + 1), total_w); 
            }
            
            // Cetak
            // total w setiap kalimat
            kalimat_yang_akan_dicetak+="\nNilai T W (Wi) setiap kalimat\n\n";
            System.out.println("\nNilai T W(Wi) setiap kalimat\n");
            for (Map.Entry<String, Double> termEntry : total_w_setiap_kalimat.entrySet()) {
                String Kalimat = termEntry.getKey();
                Double nilai = termEntry.getValue();
                
                kalimat_yang_akan_dicetak+="Kalimat: " + Kalimat + ", Nilai T W(Wi): " + nilai;
                System.out.println("Kalimat: " + Kalimat + ", Nilai T W(Wi): " + nilai);
                
                int i=0;
                for (String kata : tokenisasi_kumpulan_kalimat.get(i)){
                    double nilai_w_wi = w_wi.getOrDefault(kata, 0.0);
                    kalimat_yang_akan_dicetak+="kata : " + kata + ", nilai W(Wi): " + nilai_w_wi;
                    System.out.println("kata : " + kata + ", nilai W(Wi): " + nilai_w_wi);
                    i++;
                }
                
                System.out.println();
            }
            
            // nf_s
            Map<String, Double> nf_s_setiap_kalimat = new HashMap<>();
            for (String kalimat : total_w_setiap_kalimat.keySet()) {
                Double nilai_max = Math.max(total_w_setiap_kalimat.get(kalimat), min_threshold);
                nf_s_setiap_kalimat.put(kalimat, nilai_max);
            }
            
            // Cetak
            // nf_s
            kalimat_yang_akan_dicetak+="\nNilai NF(S) setiap kalimat\n\n";
            System.out.println("\nNilai NF(S) setiap kalimat\n");
            for (Map.Entry<String, Double> termEntry : nf_s_setiap_kalimat.entrySet()) {
                String kalimat = termEntry.getKey();
                Double nilai = termEntry.getValue();

                kalimat_yang_akan_dicetak+="Kalimat: " + kalimat + ", Nilai NF(S): " + nilai;
                System.out.println("Kalimat: " + kalimat + ", Nilai NF(S): " + nilai);
            }
            
            // W
            Map<String, Double> w_setiap_kalimat = new HashMap<>();
            for (String kalimat : total_w_setiap_kalimat.keySet()) {
                Double hasil = total_w_setiap_kalimat.get(kalimat)/nf_s_setiap_kalimat.get(kalimat);
                w_setiap_kalimat.put(kalimat, hasil);
            }
            
            // Cetak
            // W
            kalimat_yang_akan_dicetak+="\nNilai W(S) setiap kalimat\n\n";
            System.out.println("\nNilai W(S) setiap kalimat\n");
            for (Map.Entry<String, Double> termEntry : w_setiap_kalimat.entrySet()) {
                String kalimat = termEntry.getKey();
                Double nilai = termEntry.getValue();

                kalimat_yang_akan_dicetak+="Kalimat: " + kalimat + ", Nilai W(S): " + nilai;
                System.out.println("Kalimat: " + kalimat + ", Nilai W(S): " + nilai);
            }
            
            // Nilai Max W
            Double max_w = 0.0;
            String kalimat_max_w="";
            for (Map.Entry<String, Double> termEntry : w_setiap_kalimat.entrySet()) {
                String kalimat = termEntry.getKey();
                Double nilai = termEntry.getValue();
                
                if (nilai > max_w) {
                    max_w = nilai;
                    kalimat_max_w = kalimat;
                }
            }
            
            String indexKalimat = kalimat_max_w.replaceAll("[^\\d]", "");
            int index_maksimum_w_s = Integer.parseInt(indexKalimat);
            kalimat_yang_akan_dicetak+="\nNilai Maksimum W(S) pada kalimat-" + indexKalimat + " adalah "+ max_w +"\n\n";
            kalimat_yang_akan_dicetak+="Kalimat: " + kumpulan_Kalimat.get(index_maksimum_w_s) + "\n";
            System.out.println("\nNilai Maksimum W(S) pada kalimat-" + indexKalimat + " adalah "+ max_w +"\n");
            System.out.println("Kalimat: " + kumpulan_Kalimat.get(index_maksimum_w_s));
            
//            Integer totalKalimat = 0;
//            Integer totalKata = 0;
//            
//            // Preprocessing
//            List<List<String>> tokenisasiKumpulanKalimat = new ArrayList<>();
//            while(data.hasNextLine()){
//                kalimat = data.nextLine();
//                
//                // Tokenisasi
//                String[] kata = kalimat.split(" ");
//                tokenisasiKumpulanKalimat.add(Arrays.asList(kata));
//                totalKalimat += 1;
//                totalKata += kata.length;
//                System.out.println(kata);
//            }
//            
//            
//            
//            
//            // Menghitung TF
//            
//            // Menghitung TF (Term Frequency)
//            List<Map<String, Integer>> kumpulanTermFrequency = new ArrayList<>();
//            for (List<String> tokenKalimat : tokenisasiKumpulanKalimat) {
//                Map<String, Integer> termFrequency = new HashMap<>();
//                for (String kata : tokenKalimat) {
//                    termFrequency.put(kata, termFrequency.getOrDefault(kata, 0) + 1);
//                }
//                kumpulanTermFrequency.add(termFrequency);
//            }
//            
//            // Menghitung IDF (Inverse Document Frequency)
//            Map<String, Double> kumpulanInverseDocumentFrequency = new HashMap<>();
//            for (Map<String, Integer> mapTermFrequency : kumpulanTermFrequency) {
//                for (String kata : mapTermFrequency.keySet()) {
//                    kumpulanInverseDocumentFrequency.put(kata, kumpulanInverseDocumentFrequency.getOrDefault(kata, 0.0) + 1);
//                }
//            }
//            for (String kata : kumpulanInverseDocumentFrequency.keySet()) {
//                double idf = Math.log(totalKalimat / (1 + kumpulanInverseDocumentFrequency.get(kata)));
//                kumpulanInverseDocumentFrequency.put(kata, idf);
//            }
//            
//            // Menghitung TD-IDF
//            List<Map<String, Double>> kumpulan_tfidf = new ArrayList<>();
//            for (Map<String, Integer> mapTermFrequency : kumpulanTermFrequency) {
//                Map<String, Double> tfidf = new HashMap<>();
//                for (Map.Entry<String, Integer> entry : mapTermFrequency.entrySet()) {
//                    String kata = entry.getKey();
//                    double tf = (double) entry.getValue() / mapTermFrequency.size();
//                    double idf = kumpulanInverseDocumentFrequency.get(kata);
//                    double nilai_tfidf = tf * idf;
//                    tfidf.put(kata, nilai_tfidf);
//                }
//                kumpulan_tfidf.add(tfidf);
//            }
//            
//            // Menghitung total TF-IDF untuk setiap kalimat
//            double[] totalTFIDF = new double[totalKalimat];
//            for (int i = 0; i < kumpulan_tfidf.size(); i++) {
//                Map<String, Double> maptfidf = kumpulan_tfidf.get(i);
//                double jumlah = maptfidf.values().stream().mapToDouble(Double::doubleValue).sum();
//                totalTFIDF[i] = jumlah;
//            }
//            
//            // Cetak nilai TF dan IDF untuk setiap kata
//            System.out.println("Nilai TF dan IDF");
//            kalimat_yang_akan_dicetak += "Nilai TF dan IDF\n";
//            for (int i = 0; i < kumpulanTermFrequency.size(); i++) {
//                System.out.println("Kalimat " + (i + 1) + ":");
//                kalimat_yang_akan_dicetak += "Kalimat " + (i + 1) + ":\n";
//                Map<String, Integer> mapTermFrequency = kumpulanTermFrequency.get(i);
//                for (Map.Entry<String, Integer> entry : mapTermFrequency.entrySet()) {
//                    String kata = entry.getKey();
//                    int tf = entry.getValue();
//                    double idf = kumpulanInverseDocumentFrequency.get(kata);
//                    System.out.println("Kata: " + kata + ", TF: " + tf + ", IDF: " + idf);
//                    kalimat_yang_akan_dicetak += "Kata: " + kata + ", TF: " + tf + ", IDF: " + idf + "\n";
//                }
//                System.out.println();
//                kalimat_yang_akan_dicetak += "\n";
//            }
//            
//            // Cetak total TF-IDF untuk setiap kalimat
//            for (int i = 0; i < totalKalimat; i++) {
//                System.out.println("Total TF-IDF (W(Wi) untuk kalimat " + (i + 1) + ": " + totalTFIDF[i]);
//                kalimat_yang_akan_dicetak += "Total TF-IDF (W) untuk kalimat " + (i + 1) + ": " + totalTFIDF[i] + "\n";
//                
//            }
//            
//            // Total W
////            int total_w = 0;
////            for (int i = 0; i < totalKalimat; i++) {
////                total_w += totalTFIDF[i];
////            }
////            System.out.println("Total (W) Secara keseluruhan : " + total_w);
//            System.out.println("Total kalimat : " + totalKalimat);
//            System.out.println("Total kata : " + totalKata);
//            
//            kalimat_yang_akan_dicetak += "Total kalimat : " + totalKalimat;
//            kalimat_yang_akan_dicetak += "Total kata : " + totalKata;
//            
//            // Nilai min threshold
//            double nilai_min_threshold = (double) totalKata/totalKalimat;
//            
//            System.out.println("Nilai min threshold : " + nilai_min_threshold);
//            kalimat_yang_akan_dicetak += "Nilai min threshold : " + nilai_min_threshold + "\n";
//            
//            // Tokenisasi
////            List<List<String>> TokenisasiKumpulanKalimat = 
//            
//            // Hitung total NF(S)
//            
//            System.out.println("\nNilai NF(S)\n");
//            kalimat_yang_akan_dicetak += "\nNilai NF(S)\n";
//            
//            double total_nilai_nf = (double) 0;
////            double t_nf = (double) 0;
////            double[] total_nilai_nf = new double[totalKalimat];
//            double[] kumpulan_nilai_nf = new double[totalKalimat];
//            
//            
//            int index = 0;
//            for (List<String> tokenKalimat : tokenisasiKumpulanKalimat) {
//                Integer total_kata_per_kalimat = tokenKalimat.size();
//                double nilai_nf = (double) Math.max(total_kata_per_kalimat, min_threshold);
//                System.out.println("Nilai NF(S) untuk kalimat ke-"+index + " adalah " + nilai_nf);
//                kalimat_yang_akan_dicetak += "Nilai NF(S) untuk kalimat ke-"+index + " adalah " + nilai_nf+"\n";
//                total_nilai_nf = Math.max(total_nilai_nf, nilai_nf);
////                t_nf = Math.max(total_nilai_nf, nilai_nf);
////                total_nilai_nf[index] = t_nf;
//                kumpulan_nilai_nf[index] = nilai_nf;
//                index++;
//            }
//            
//            // Nilai total NF(S)
////            Collection.max(kumpulan_nilai_nf);
//            
////            Double total_nilai_nf = Arrays.stream(kumpulan_nilai_nf).max().orElse(Double.NaN);
//            
////            double total_nilai_nf = (double) 1;
//            
//            // Hitung W(s)
////            for (List<String> tokenKalimat : tokenisasiKumpulanKalimat) {
////                
////            }
////            
////            for (int i=0; i<tokenisasiKumpulanKalimat.size(); i++){
////                // Hitung total NF(S)
////                Integer total_kata_per_kalimat = tokenKalimat.size();
////                double nilai_nf = (double) Math.max(total_kata_per_kalimat, min_threshold);
////                System.out.println("Nilai NF(S) untuk kalimat " + i + 1 + ": " + );
////                
////            }
//            
//            System.out.println("\nNilai W(s)\n");
//            kalimat_yang_akan_dicetak += "\nNilai W(s)\n";
//
//            for (int i=0; i<totalKalimat; i++){
//                // Hitung total W(s)
//                // Setiap kalimat
//                
//                double nilai_w_wi = totalTFIDF[i];
//                double nilai_nf_s = kumpulan_nilai_nf[i];
//                
//                double nilai_w_s = nilai_w_wi/nilai_nf_s;
//                
//                System.out.println("Nilai W(s) untuk kalimat " + (i + 1) + ": " + nilai_w_s);
//                kalimat_yang_akan_dicetak += "Nilai W(s) untuk kalimat " + (i + 1) + ": " + nilai_w_s+"\n";
//                
//            }
//            
            // Hasil ditampilkan di GUI
            txttampilkalimat.setText(kalimat_yang_akan_dicetak.toString());
            
            
            
        }catch(Exception e){
            System.err.println(e.getMessage());
        }
    }
    
    
    
    
    
    
    public void simpan_kumpulan_kalimat(String filename){
        try{
            // baca kalimat
            
//            String kalimat = "";
            File myobj  = new File(filename);
            Scanner data = new Scanner(myobj);
            while(data.hasNextLine()){
                // simpan kalimat
                
//                kalimat = data.nextLine();
                
//                String[] kalimat_per_kata = kalimat.split(" ");
                
                // simpan ke kumpulan kalimat
//                kumpulan_kalimat.add(new ArrayList<>());
                
//                for (String kata : kalimat_per_kata) {
//                    kumpulan_kalimat.get(kumpulan_kalimat.size() - 1).add(kata);
//                }
            
//                kumpulan_kalimat.add(kalimat);
                kumpulan_kalimat.add(data.nextLine());
                
                
            }
            
            Map<String, Map<String, Double>> tfidfMap = new HashMap<>();
//            for (String term : termFrequencyMap.)
            
            
        }catch(Exception e){
            System.err.println(e.getMessage());
        }
    }
    
//    private static Map<String, Map<String, Double>> hitungTFIDF(List<String> documents) 
//    private Map<String, Map<String, Double>> hitungTFIDF(List<String> documents) {
//        Map<String, Map<String, Integer>> tfMap = new HashMap<>();
//        Map<String, Integer> idfMap = new HashMap<>();
//        
//        
//        
//        for (int i = 0; i < kumpulan_kalimat.size(); i++) {
//            String kalimat = kumpulan_kalimat.get(i);
//            String[] kumpulan_kata = kalimat.toLowerCase().split("\\s+");
//            
//            for (String kata : kumpulan_kata) {
//                tfMap.computeIfAbsent(kata, k -> new HashMap<>());
//                tfMap.get(kata).put(Integer.toString(i), tfMap.get(kata).getOrDefault(Integer.toString(i), 0) + 1);
//            }
//            
//            Set<String> kumpulan_kata_unik = new HashSet<>(Arrays.asList(kumpulan_kata));
//            
//            
//            for (String dokumenkalimat : tfMap.get(kata).keySet()) {
//                    
//                }
//        }
//    }
    
    public void melakukan_perhitungan(String filename){
        try{
            // baca kalimat
            
            String kalimat = "";
            File myobj  = new File(filename);
            Scanner data = new Scanner(myobj);
            while(data.hasNextLine()){
                // simpan kalimat
                
                kalimat = data.nextLine();
                
                String[] kalimat_per_kata = kalimat.split(" ");
                
                int total_kata = kalimat_per_kata.length;
                
                // simpan ke kumpulan kalimat
//                kumpulan_kalimat.add(new ArrayList<>());
                
//                for (String kata : kalimat_per_kata) {
//                    kumpulan_kalimat.get(kumpulan_kalimat.size() - 1).add(kata);
//                }
                
            }
        }catch(Exception e){
            System.err.println(e.getMessage());
        }
    }
    
    
    public void ProsesBacaFile(String filename){
        String data1perkata[] = new String[100];
        try{
            String data1 = "";
            File myobj  = new File(filename);
            Scanner data = new Scanner(myobj);
            while(data.hasNextLine()){
                data1 = data1+"\n"+data.nextLine();
                data1perkata = data1.split(" ");
                System.out.println("data1 per kata: "+ data1perkata[0]);
                System.out.println("data1: "+data1); }
            txttampilkalimat.setText(data1.toString());
        }catch(FileNotFoundException e){
            System.out.println("An Error Occured");
            e.printStackTrace(); }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuUploadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuUploadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuUploadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuUploadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuUploadFile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdbrowse;
    private javax.swing.JButton cmdsimpan;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtpath;
    private javax.swing.JTextArea txttampilkalimat;
    // End of variables declaration//GEN-END:variables
}
